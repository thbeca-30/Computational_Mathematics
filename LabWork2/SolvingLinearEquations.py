import numpy as np



eps = 0.001
def GaussMethod():
    print('Метод Гаусса:')
    a = np.array([
        [3.11, -1.66, -0.60, -0.92],
        [-1.65, 3.51, -0.78, 2.57],
        [0.60, 0.78, -1.87, 1.65]
    ])
    a[1] = a[1] - np.round(a[0] * (-0.53), 2) # из второй строчки вычитаем первую, умноженную на -0.53
    print(a)
    a[2] = a[2] - np.round(a[0] * 0.1929, 2) # из третей строчки вычитаем первую, умноженную на 0.1929
    print(a)
    a[2] = a[2] - np.round(a[1] * 0.4183, 2) # из третей строчки вычитаем вторую, умноженную на 0.4183
    print(a)
    x3 = round(a[2][3] / a[2][2], 2) # выводим x3
    x2 = round(((a[1][3] - x3 * a[1][2]) / a[1][1]), 2) # выводим x2
    x1 = round(((a[0][3] - x3 * a[0][2] - x2 * a[0][1]) / a[0][0]), 2) # выводим x1
    print('x1 = ', x1, 'x2 = ', x2, 'x3 = ', x3)



def SimpleIteration():
    print('Метод простой итерации:')
    a = np.array([
        [3.11, -1.66, -0.60, -0.92],
        [-1.65, 3.51, -0.78, 2.57],
        [0.60, 0.78, -1.87, 1.65]
    ])
    x0 = [0, 0, 0] # вектор x(k-1)
    x1 = [0, 0, 0] # вектор x(k)
    kolIter = 0
    while True:
        # по формуле находим x1(k), x2(k), x3(k)
        x1[0] = (a[0][3] - a[0][2] * x0[2] - a[0][1] * x0[1]) / a[0][0]
        
        x1[1] = (a[1][3] - a[1][0] * x0[0] - a[1][2] * x0[2]) / a[1][1]
        
        x1[2] = (a[2][3] - a[2][0] * x0[0] - a[2][1] * x0[1]) / a[2][2]

        kolIter += 1 # увеличиваем количество итераций
        
        if max([abs(x1[0] - x0[0]), abs(x1[1] - x0[1]), abs(x1[2] - x0[2])]) < eps: # берем масимальное значение |x(k) - x(k-1)| и сравниваем его с eps
            break
        x0 = x1.copy() # обновляем x(k-1) для следующей итерации
    print('x1 = ', x1[0], 'x2 = ', x1[1], 'x1 = ', x1[2], '|max(x1 - x0))| < eps: ', max([abs(x1[0] - x0[0]), abs(x1[1] - x0[1]), abs(x1[2] - x0[2])]), 'Количество итераций: ', kolIter)

def GaussSeidel():
    print('Метод Гаусса-Зейделя:')
    a = np.array([
        [3.11, -1.66, -0.60, -0.92],
        [-1.65, 3.51, -0.78, 2.57],
        [0.60, 0.78, -1.87, 1.65]
    ])
    x0 = [0, 0, 0] # вектор x(k-1)
    x1 = [0, 0, 0] # вектор x(k)
    kolIter = 0
    while True:
        # по формуле находим x1(k), x2(k), x3(k)
        x1[0] = (a[0][3] - a[0][2] * x0[2] - a[0][1] * x0[1]) / a[0][0]
        
        x1[1] = (a[1][3] - a[1][0] * x1[0] - a[1][2] * x0[2]) / a[1][1]
        
        x1[2] = (a[2][3] - a[2][0] * x1[0] - a[2][1] * x1[1]) / a[2][2]
        
        kolIter += 1 # увеличиваем количество итераций
        
        if max([abs(x1[0] - x0[0]), abs(x1[1] - x0[1]), abs(x1[2] - x0[2])]) < eps: # берем масимальное значение |x(k) - x(k-1)| и сравниваем его с eps
            break
        x0 = x1.copy() # обновляем x(k-1) для следующей итерации
    print('x1 = ', x1[0], 'x2 = ', x1[1], 'x1 = ', x1[2], '|max(x1 - x0))| < eps: ', max([abs(x1[0] - x0[0]), abs(x1[1] - x0[1]), abs(x1[2] - x0[2])]), 'Количество итераций: ', kolIter)
    
    